#lang planet neil/sicp
(define (next-odd n)
  (if (odd? n)
      (+ 2 n)
      (+ 1 n)))
(define (odd? n)
  (> (remainder n 2) 0))
(define (prime? n)
  (= n (smallest-divisor n)))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))
(define (next n)
  (if (= n 2)
      3
      (+ n 2)))
(define (divides? a b)
  (= (remainder b a) 0))
(define (square x)
  (* x x))
(define (continue-prime n count start-time)
  (cond ((= count 0)
         (display "Is prime")
         (report-prime (- (runtime) start-time)))
        ((prime? n)
         (display n)
         (newline)
         (continue-prime (next-odd n) (- count 1) start-time))
        (else
         (continue-prime (next-odd n) count start-time))))
(define (report-prime elapsed-time)
  (newline)
  (display elapsed-time))
(define (search-prime n count)
  (continue-prime n count (runtime)))
