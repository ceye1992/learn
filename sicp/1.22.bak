#lang planet neil/sicp
(define (next-odd n)
  (if (odd? n)
      (+ 2 n)
      (+ 1 n)))
(define (odd? n)
  (> (remainder n 2) 0))
(define (prime? n)
  (= n (smallest-divisor n)))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (square x)
  (* x x))
(define (continue-prime n count )
  (cond ((= count 0)
         (display "Is prime"))
        ((prime? n)
         (display n)
         (newline)
         (continue-prime (next-odd n) (- count 1)))
        (else
         (continue-prime (next-odd n) count))))
