#lang planet neil/sicp
(define (next-odd n)
  (if (odd? n)
      (+ 2 n)
      (+ 1 n)))
(define (odd? n)
  (> (remainder n 2) 0))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))
(define (square x)
  (* x x))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))
(define (continue-prime n count start-time)
  (cond ((= count 0)
         (display "Is prime")
         (report-prime (- (runtime) start-time)))
        ((fast-prime? n 10)
         (display n)
         (newline)
         (continue-prime (next-odd n) (- count 1) start-time))
        (else
         (continue-prime (next-odd n) count start-time))))
(define (report-prime elapsed-time)
  (newline)
  (display elapsed-time))
(define (search-prime n count)
  (continue-prime n count (runtime)))