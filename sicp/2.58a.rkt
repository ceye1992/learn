(define (make-sum a1 a2)
  (cond ((=number? a1 0)
         a2)
        ((=number? a2 0)
         a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        (else
         (list a1 '+ a2))))
(define (sum? x)
  (and (pair? x)
       (eq? (cadr x) '+)))
(define (addend s)
  (car s))
(define (augend s)
  (caddr s))

(define (make-product a1 a2)
  (cond ((and (number? a1) (number? a2))
         (* a1 a2))
        (else
         (list a1 '* a2))))
(define (multiplier p)
  (car p))
(define (multiplicand p)
  (caddr p))


(define (deriv exp var)
  (cond ((number? exp)
         0)
        ((variable? exp)
         (if (same-variable? exp var)
             1
             0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        (else
         (error "unknown expressionn type -- DERIV" exp))))

(define (variable? x)
  (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1)
       (variable? v2)
       (eq? v1 v2)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
