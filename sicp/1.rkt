(define (entry tree)
  (car tree))
(define (left-branch tree)
  (cadr tree))
(define (right-branch tree)
  (caddr tree))
(define (make-tree entry list right)
  (list entry list right))

(define (element-of-set? x set)
  (cond ((null? set)
         false)
        ((= x (entry set))
         true)
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        ((> x (entry set))
         (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set)
         (make-tree x '() '()))
        ((= x (entry set))
         set)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (lift-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (lift-branch set)
                    (adjoin-set x (right-branch set))))))
         
